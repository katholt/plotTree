{
    "contents" : "library(shiny)\nlibrary(ape)\nlibrary(RLumShiny)\nsource(\"plotTree.R\")\n\n# Please run this application in an external web browser but not in the built-in browser of shiny\n# Files: bin\\app.R and bin\\plotTree.R\n# Use runApp(appDir = \"bin\") to execute this application\n\n#======================== User interface ========================\n\nui <- fluidPage(\n  \n  #titlePanel(\"Plot tree\"),\n  sidebarLayout(\n    sidebarPanel(\n      tabsetPanel(\n        tabPanel(\"Tree\",      \n          ### UPLOAD TREE\n          br(),\n          fileInput('tree_file', 'Upload tree file (nwk)', multiple = FALSE,\n                    accept = c('biotree/newick','.nwk', '.tree')),\n          checkboxInput(\"label_tips\", \"Label tree tips?\", value = FALSE),\n          conditionalPanel(\n            condition = \"input.label_tips\",\n            textInput(\"tip_label_size\", label = \"Text size\", value = \"1\"),\n            textInput(\"offset\", label = \"Offset\", value = \"0\")\n          ),    \n          textInput(\"tree_line_width\", label = \"Branch width\", value = \"1.5\"),\n          jscolorInput(inputId = \"branch_colour\", label = \"Branch colour:\", value = \"#000000\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T),\n          br()\n        ), # finished tree tab\t\n        \n        tabPanel(\"Info\",      \n          ### METADATA (info file)\n          br(),\n          fileInput('info_file', 'Upload metadata (CSV)'),\n          checkboxInput('chk_info', 'Use metadata', value = FALSE),\n          conditionalPanel(\n            condition = \"input.chk_info\",\n            checkboxInput('print_metadata', 'Print columns', value = FALSE),\n            conditionalPanel(\n              condition = \"input.print_metadata\",\n              selectInput('print_column', 'Metadata columns to print:', c(''), multiple=TRUE)\n            ),\n            \"--------\",\n            selectInput('colour_tips_by', 'Colour tips by:', c('')),\n            # options if colouring by tips\n            conditionalPanel(\n              condition = \"input.colour_tips_by != '(none)'\",\n              sliderInput(\"tip_size\", label = \"Tip size\", min = 0.1, max = 20, value = 0.5),\n              ### COLOUR PANELS\n              checkboxInput(\"legend\", \"Legend for node colours?\", value=TRUE),\n              selectInput(\"legend_pos\", label = \"Position for legend\", \n                          choices = list( \"bottomleft\"=\"bottomleft\", \"bottomright\"=\"bottomright\",\n                                          \"top-left\"=\"topleft\", \"topright\"=\"topright\")\n              ), \n              \"--------\",\n              checkboxInput(\"ancestral\", \"Ancestral state reconstruction?\", value=FALSE),\n              sliderInput(\"pie_size\", label = \"Pie graph size\", min = 0.1, max = 20, value = 0.5)\n            )\n          )\n        ),\t# finished metadata tab\t\n        \n        tabPanel(\"Data\", \n          ### HEATMAP DATA\n          br(),\n          fileInput('heatmap_file', 'Upload heatmap file (CSV)', multiple = F, accept = c('text/csv', '.csv')),\n          checkboxInput('chk_heatmap', 'Plot heatmap', value = FALSE),  \n          conditionalPanel(\n            condition = \"input.chk_heatmap\", h4(\"Heatmap options\"),\n            selectInput(\"clustering\", label = h5(\"Clustering:\"), \n                        choices = list(\"Select...\" = F, \"Cluster columns by values\" = T, \"Square matrix\"=\"square\"),\n                        selected = \"Select\"), \n            \"--------\",\n            # OPTIONALLY DISPLAY COLOUR OPTIONS\n            checkboxInput(\"heat_colours_prompt\", \"Change heatmap colour ramp\", value = FALSE),\n            conditionalPanel(\n              condition = \"input.heat_colours_prompt\", \n              jscolorInput(inputId = \"start_col\", label = \"Start colour:\", value = \"FFFFFF\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T),\n              jscolorInput(inputId = \"middle_col\", label = \"Middle colour:\", value = \"FFF94D\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T),\n              jscolorInput(inputId = \"end_col\", label = \"End colour:\", value = \"1755FF\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T),\n              textInput(\"heatmap_breaks\", label = \"Breaks:\", value = \"100\")\n            ),\n            #\t\t\t\t\tcheckboxInput(\"heatColoursSpecify\", \"Specify heatmap colours manually\", value=FALSE),\n            #\t\t\t\t\tconditionalPanel(\n            #\t\t\t\t\t\tcondition = \"input.heatColoursSpecify\",\n            #\t\t\t\t\t\ttextInput(\"heatmap_colour_vector\", label = \"R code (vector), e.g. rev(gray(seq(0,1,0.1)))\", value = \"\")\n            #\t\t\t\t\t),\n            \"--------\",\n            textInput(\"heatmap_decimal_places\", label = \"Decimal places to show in heatmap legend:\", value = \"1\"),\n            textInput(\"col_label_cex\", label = \"Text size for column labels:\", value = \"0.75\")\n            #\t\t\t\t\ttextInput(\"vlines_heatmap\", label = \"y-coordinates for vertical lines (e.g. c(2,5)):\", value = \"\"),\n            #\t\t\t\t\tjscolorInput(inputId=\"vlines_heatmap_col\", label=h5(\"Colour for vertical lines:\"), value=\"1755FF\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T)\n          )\n        ), # finished heatmap options\n        \n        tabPanel(\"Other\",\n          tabsetPanel(\n            tabPanel(\"Barplots\",\n                      br(),\n                      # bar plots\n                      fileInput('bar_data_file', 'Upload data for bar plots (CSV)', multiple = F, accept = c('text/csv', '.csv')),\n                      checkboxInput('chk_barplot', 'Plot bar graphs', value = FALSE),\n                      conditionalPanel(\n                        condition = \"input.chk_barplot\", h5(\"Barplot options\"),\n                        jscolorInput(inputId = \"bar_data_col\", label = \"Colour for barplots:\", value=\"1755FF\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T)\n                      )\n                    ),\n            tabPanel(\"Genome blocks\",\n                      br(),\n                      # genome blocks\n                      fileInput('blocks_file', 'Upload genome block coordinates', multiple = F, accept = c('text/tab', '.txt')),\n                      checkboxInput('chk_blocks', 'Plot genome blocks', value = FALSE),\n                      conditionalPanel(\n                        condition = \"input.chk_blocks\", h5(\"Genome block plotting options\"),\n                        textInput(\"genome_size\", label = \"Genome size (bp):\", value = \"5E6\"),\n                        jscolorInput(inputId = \"blocks_colour\", label = \"Colour for blocks:\", value=\"1755FF\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T),\n                        sliderInput(\"blwd\", label = \"Block size\", min = 0.1, max = 20, value = 5)\n                      )\n            ),\n                   \n            tabPanel(\"SNPs\",\n                      br(),\n                      # snps\n                      fileInput('snps_file', 'Upload SNP allele table (CSV)', multiple = F, accept = c('text/csv', '.csv')),\n                      checkboxInput('chk_snps', 'Plot SNPs', value = FALSE),\n                      conditionalPanel(\n                        condition = \"input.chk_snps\", h5(\"SNP plotting options\"),\n                        textInput(\"genome_size\", label = \"Genome size (bp):\", value = \"5E6\"), # make this linked to previous conditional \n                        jscolorInput(inputId = \"snps_colour\", label = \"Colour for SNPs:\", value=\"1755FF\", position = \"bottom\", color = \"transparent\", mode = \"HSV\", slider = T, close = T)\n                      )\n            )\n          ) #finished tabsetPanels\n        ), # finished other data tab\n        \n        tabPanel(\"Layout\",\n                 br(),\n                 h5(\"Relative widths\"),\n                 textInput(\"tree_width\", label = \"Tree\", value = 10),\n                 textInput(\"info_width\", label = \"Info columns\", value = 10),\n                 textInput(\"heatmap_width\", label = \"Heatmap\", value = 30),\n                 textInput(\"bar_width\", label = \"Bar plots\", value = 10),\n                 textInput(\"genome_width\", label = \"Genome data (blocks, SNPs)\", value = 10),\n                 br(),\n                 h5(\"Relative heights\"),\n                 textInput(\"main_height\", label = \"Main  panels\", value = 100),\n                 textInput(\"label_height\", label = \"Heatmap labels\", value = 10),\n                 br(),\n                 h5(\"Borders\"),\n                 textInput(\"edge_width\", label = \"Border width/height\", value = 1)\n        ),\n        \n        # Settings and the button for printing\n        tabPanel(\"Save\",\n                 br(),  # prints an empty line in the html file that is displayed as the UI\n                 radioButtons(inputId = \"format\", label = \"Download type:\",\n                              choices = c(\"PNG\" = \"png\", \"PDF\" = \"pdf\"), selected = \"png\"),\n                 sliderInput(inputId = \"w\", label = \"width (A4 = 210mm):\", min = 180, max = 1200, value = 210, width = '80%', ticks = FALSE),\n                 sliderInput(inputId = \"h\", label = \"height (A4 = 297mm):\", min = 180, max = 1200, value = 297, width = '80%', ticks = FALSE),\n                 textInput(\"file_name\", label = \"File name\", value = \"figure\"),  # The default file name is \"figure\".\n                 downloadButton('downloadButton')  # This will generate a new variable 'downloadbutton'\n        )  # end of tabPanel \"Save\"\n      ), # finish tabsetPanel\n      \n      ### DRAW BUTTON\n      br(),\n      actionButton(\"draw_button\", \"Draw!\")\n      ),  # end of the sidebarPanel\n    \n    mainPanel(\n      plotOutput(\"Tree\", height = 800)\n    )\n  ) # finished sidebarLayout\n) # end of fluidPage and the ui\n\n#======================== Server =========================\n\nserver <- function(input, output, session) {\n  \n  # An event observer for changes to INFO CSV file\n  observeEvent(input$info_file, \n  {\n    # read the CSV file and get the column names.\n    # re-reading this file repeatedly is inefficient\n    df <- read.table(input$info_file$datapath, header = TRUE, sep = ',')\n    \n    # build a list of values, this is what is required by update methods\n    info_cols <- list()\n    for (v in colnames(df)) {\n      info_cols[v] <- v\n    }\n    # update the two input widgets using the column names\n      \n    updateSelectInput(session, inputId = 'colour_tips_by', choices=c('(none)',info_cols[-1]))\n    updateSelectInput(session, inputId = 'print_column', choices=c(info_cols[-1]))\n      \n    # switch on the meta data plotting option\n    updateCheckboxInput(session, inputId = 'info_data', value=TRUE)\n  })  # end of observeEvent\n\n  # An event observer for changes to HEATMAP file\n  observeEvent(input$heatmap_file, \n  {\n    # switch on the heatmap plotting option\n    updateCheckboxInput(session, inputId = 'chk_heatmap', value=TRUE)\n  })\t\n  \n  # An event observer for changes to BAR DATA file\n  observeEvent(input$bar_data_file, \n  {\n    # switch on the heatmap plotting option\n    updateCheckboxInput(session, inputId = 'chk_barplot', value=TRUE)\n  })\t\n  \n  # An event observer for changes to BLOCKS file\n  observeEvent(input$blocks_file, \n  {\n    # switch on the heatmap plotting option\n    updateCheckboxInput(session, inputId = 'chk_blocks', value=TRUE)\n  })\t\n  \n  # An event observer for changes to SNPs file\n  observeEvent(input$snps_file, \n  {\n    # switch on the heatmap plotting option\n    updateCheckboxInput(session, inputId = 'chk_snps', value=TRUE)\n  })\n  \n  ### PLOT THE TREE: defines the main plotting function which will be called by downloadHandler() as well\n  doPlotTree <-function() {\n    ### ALL VARIABLES PULLED FROM 'input' GO INSIDE HERE\n    isolate ({\n      \n      l <- input$Layout\n      t <- input$Tree\n      i <- input$Info\n      o <- input$Other\n      d <- input$Data\n      \n      tree_file <- input$tree_file$datapath\n      \n      # tree plotting options\n      label_tips <- input$label_tips\n      tree_line_width <- as.integer(input$tree_line_width)\n      branch_colour <- input$branch_colour\n      tip_label_size <- as.integer(input$tip_label_size)\n      offset <- as.integer(input$offset)\n      \n      # metadata variables\n      info_file <- input$info_file$datapath\n      tip_size <- input$tip_size\n      colour_tips_by <- input$colour_tips_by\n      if (colour_tips_by == '(none)') {colour_tips_by <- NULL}\n      ancestral <- input$ancestral\n      pie_size <- input$pie_size\n      legend <- input$legend\n      legend_pos <- input$legend_pos\n      print_column <- input$print_column\n      print_metadata <- input$print_metadata\n      if (!print_metadata) { print_column <- NA }\n      \n      # heatmap variables\n      heatmap_file <- input$heatmap_file$datapath\n      cluster <- input$clustering\n      heatmap_decimal_places <- as.integer(input$heatmap_decimal_places)\n      col_label_cex <- as.integer(input$col_label_cex)\n      vlines_heatmap_col <-input$vlines_heatmap_col\n      vlines_heatmap <- input$vlines_heatmap\n      \n      #    \theatColoursSpecify <- input$heatColoursSpecify\n      \n      #\t\t\tif (heatColoursSpecify) {\n      #\t\t\t\theatmap_colours <- input$heatmap_colour_vector\n      #\t\t\t}\n      #\t\t\telse {\n      heatmap_colours <- colorRampPalette(c(input$start_col,input$middle_col,input$end_col),space=\"rgb\")(as.integer(input$heatmap_breaks))\n      #\t\t\t}\n      \n      # barplot variables\n      bar_data_file <- input$bar_data_file$datapath\n      bar_data_col <- input$bar_data_col\n      \n      # block plot variables\n      blocks_file <- input$blocks_file$datapath\n      blocks_colour <- input$blocks_colour\n      blwd <- input$blwd\n      genome_size <- input$genome_size\n      \n      snps_file <- input$snps_file$datapath\n      snps_colour <- input$snps_colour\n      \n      # Layout/spacing\n      tree_width <- as.numeric(input$tree_width)\n      info_width <- as.numeric(input$info_width)\n      heatmap_width <- as.numeric(input$heatmap_width)\n      bar_width <- as.numeric(input$bar_width)\n      genome_width <- as.numeric(input$genome_width)\n      main_height <- as.numeric(input$main_height)\n      label_height <- as.numeric(input$label_height)\n      edge_width <- as.numeric(input$edge_width)\n      \n      # TRACK DATA TYPES TO PLOT\n      chk_heatmap <- input$chk_heatmap\n      chk_info <- input$chk_info\n      chk_barplot <- input$chk_barplot\n      chk_blocks <- input$chk_blocks\n      chk_snps <- input$chk_snps\n      \n      if (is.null(tree_file)) { return(NULL) }\n      \n      if (!chk_info) { info_file <- NULL } \n      else { info_file <- info_file }\n      \n      if (!chk_heatmap) { heatmap_file <- NULL } \n      else { heatmap_file <- heatmap_file }\n      \n      if (!chk_barplot) { bar_data_file <- NULL } \n      else { bar_data_file <- bar_data_file }\n      \n      if (!chk_blocks) { blocks_file <- NULL } \n      else { blocks_file <- blocks_file }\n      \n      if (!chk_snps) { snps_file <- NULL } \n      else { snps_file <- snps_file } \n      \n    }) # end isolate\n    \n    # underlying call to plotTree(), drawn to screen and to file\n    plotTree(tree = tree_file, \n             tip.labels = label_tips, tipLabelSize = tip_label_size, offset = offset,\n             lwd = tree_line_width, edge.color = branch_colour,\n             infoFile = info_file, infoCols = print_column, \n             colourNodesBy = colour_tips_by, tip.colour.cex = tip_size, \n             ancestral.reconstruction = ancestral, pie.cex = pie_size, \n             legend = legend, legend.pos = legend_pos,\n             heatmapData = heatmap_file, cluster = cluster,\n             heatmap.colours = heatmap_colours,\n             heatmapDecimalPlaces = heatmap_decimal_places, colLabelCex = col_label_cex,\n             vlines.heatmap = vlines_heatmap, vlines.heatmap.col = vlines_heatmap_col,\n             barData = bar_data_file, barDataCol = bar_data_col,\n             blockFile = blocks_file, block_colour = blocks_colour, blwd = blwd,\n             genome_size = genome_size,\n             snpFile = snps_file, snp_colour = snps_colour,\n             treeWidth = tree_width, infoWidth = info_width, dataWidth = heatmap_width,\n             barDataWidth = bar_width, blockPlotWidth = genome_width, \n             mainHeight = main_height, labelHeight = label_height, edgeWidth = edge_width\n    ) \n  }\n  \n  output$Tree <- renderPlot({\n    input$draw_button  # do not need to reset the draw_button value which increases by every click\n    doPlotTree()\n  }) # end render plot\n  \n  # downloads a high-definition plot of the input data\n  # This function is called when the download button is clicked\n  output$downloadButton <- downloadHandler(\n    \n    filename = function() {\n      # This is the default file name displayed in the download box poped up after clicking the download button.\n      # You can change the filename in the download box.\n      f <- input$file_name\n      if(input$format == \"pdf\"){\n        return(paste(f, \".pdf\", sep = \"\"))\n      } else {\n        return(paste(f, \".png\", sep = \"\"))\n      }\n    },\n    \n    content = function(tmp) {\n      # tmp: the file name of a non-existent temp file.\n      if(input$format == \"pdf\"){\n        MM2Inch <- 0.03937  # convert to millimetres to inches because the unit for pdf(..) is inch.\n        pdf(tmp, width = as.numeric(input$w) * MM2Inch, height = as.numeric(input$w) * MM2Inch, paper = \"special\")  \n        # \"special\": the paper size is specified by the width and height; a4r: landscape orientation\n          doPlotTree()  # redraw the plot\n        dev.off()\n      } else {\n        png(tmp, width = as.numeric(input$w), height = as.numeric(input$w), units = \"mm\", res = 72)\n        # res: the resolution is set to 72 ppi\n          doPlotTree()  # redraw the plot\n        dev.off()\n      }\n    }\n  )\n} # end of the function server(..)\n\n#======================== Executes the whole script =========================\n\nshinyApp(ui = ui, server = server)",
    "created" : 1442378666405.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4000526187",
    "id" : "3C7EE37E",
    "lastKnownWriteTime" : 1435447656,
    "path" : "G:/01_Research/Scripts/plotTree/plotTreeShiny/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}